import P5Expressions
import P5Render

prettyRender $ makeJSVar "CENTER"

render $ LerpColor (Color 2 2 2) (Color 2 2 3) (makeValue 0.3)

render $ do
  push
-- demo1: boxtrain

d1 $ "808bd:2*8" # gain 1
    # size 0.8
    # room 0.4

d1 $ ""

reset draw

let mat = [[2.0,0.0,0.0],[2.0,1.0,0.0],[0.0,0.0,1.0]]
in draw $ do
  applymatrix (makeValue mat)
  listEnumToFunc [do
                    text (makeJSVar "wanna make cool shit?") (-400) (x*15) blank blank
                    |x <- map makeValue [0..4]]


let mat = [[2.0,0.0,0.0],[2.0,1.0,0.0],[0.0,0.0,1.0]]
    mat' = [[8.0,0.0,0.0],[8.0,1.0,0.0],[0.0,0.0,1.0]]
in draw $ do
  push
  fill 255 255 255
  applymatrix (makeValue mat)
  listEnumToFunc [do
                    -- fill 255 255 255
                    text (makeJSVar "wanna make cool shit?") (-400) (x*15) blank blank
                    |x <- map makeValue [0..4]]
  pop
  push
  fill 150 0 0
  applymatrix (makeValue mat')
  listEnumToFunc [do
                    text (makeJSVar "DEMO") (100 - (frameCount/1)) (x*15) blank blank
                    |x <- map makeValue [0..2]]
  pop



draw $


  reset draw

mat = [[[1.0],[0.0],[0.0]],[[0.0],[1.0],[0.0]],[[0.0],[0.0],[1.0]]]
:set prompt ">"
:info ArgExDList
mat' = map (map sin) mat
mat'

putStrLn $ render mat

:t draw

render $ applymatrix $ makeValue mat
l = (mat :: [[Double]])

render $

imac = "https://i2.wp.com/512pixels.net/wp-content/uploads/S3/2012-12-13-bondi-blue.jpeg?w=640"
createImg imac

image imac

draw $ do
  pack (makeJSVar "")

draw $ do
  image imac 0 0 0 0


import Modules.P5Image
removePunc $ varFunc $ makeJSVar imac
:list removePunc


render $ applymatrix $ makeValue [[1,0,0],[0,1,0],[0,0,1]]



do
  hush
  d1 $ fast 2 $ "[~ 808:2!3, ~ 808:4*2]*2" # cps (80/120)
      -- # room "<0.2 0.5>"
  -- d2 $ hurry 2 $ "808bd:2(3,8) [808sd:2, 808sd:4](1,8)" # gain 2
      -- # speed 2
      # orbit 0 # triode 1.5
  -- d3 $ "[808bd:2(8,8), ~ 808sd:2]" # gain 2

d1 $ "808:2*64"
    # pan (slow 4 $ sine)
    # speed 0.5
    # room 0.2



k = do
  translate (-200) (-200) (-200)
  rect 200 200 200 (50 + (100 * (lfo' 4)))
  rect 200 200 (20 + (100 * (lfo' 4) + 100)) 200
  rect 200 (20 + (100 * (lfo' 4) + 250)) 200 200
  rect (20 + (100 * (lfo' 4) + 300)) 200 200 200
  translate (-200) (-200) (-200)
  rect (20 + (100 * (20 + lfo' 4) + 350)) 200 200 200
  translate (-200) (-200) (-200)

k2 = do
  translate 500 0 0
  k
  translate 0 500 0
  k
  k

k4 = do
  translate (-200) (200) 0
  push
  listEnumToFunc $ take 5 (cycle [k2])
  pop


draw $ do
  k2
  translate 0 0 (-8000)
  rotateX ((2+) $ lfo' 3)
  -- rotateY $ frameCount*0.0005
  translate (-200) (00) 0
  k4
  rotateY 180
  k4
  translate (400) (00) 0
  k4
  k4
  rotateY 180
  k4
  k4

render initFFT

draw $ do
  initFFT
  -- consoleLog (freqBin 80)
  -- rotateZ (lfo' 20)
  rect (80 + 80) 20 20 (20 + 200*(lfo' 200))
  -- rect (80 + 80) 200 200 200

prettyRender $ do

reset draw

draw $ do
  -- initFFT
  consoleLog p5gain
  rect 20 (p5gain*200)  200 200

render $ (freqBin 20)

freqBin x = makeJSVar' (render $ FreqBin x)

render $ freqBin 29

freqBin x = FreqBin x


draw $ do
  -- initFFT
  -- consoleLog p5gain
  rect (80 + 80) 20 20 (20 + 2000*(freqBin 20))

  let spectrum = fft.analyze();
  rect((80 + 80),20,20,(20 + (200 * (Math.sin((frameCount * 2.0e-2))))));

render initFFT


  consoleLog p5gain

render $ makeJSVar Gain

:list makeJSVar



d1 $ slice 8 "0..7" $ "xxx"


jsMod (varFunc frameCount) (varFunc (makeValue 8))
:t frameCount
import P5JSRenderFuncs

mod_ argex0 argex1 = ArgEx (mod w z) (P5JSRenderFuncs.jsMod f0 f1)
  where (w,z) = (P5Expressions.value argex0, P5Expressions.value argex1)
        (f0,f1) = (varFunc argex0, varFunc argex1)


render (1 * 0.004 * 1.0)

render $ do
  rotate(mod_ frameCount 8)

  applymatrix [[1,0,0],[40,1,0],[3,0,1]]
  rect 100 100 (-100) (-100)


d1 $ "bd*8*2"
d1 $ "bd*8*2"

concat $ concat mat



do
  hush
  -- d1 $ linger 0.5 $ (iter 4) $ n ((run 16) + "< 0 2 3 4 5 >")  # "yeah" # gain 1 # cut "-1"
  --     # speed 0.25
  --     # pan (sine)
  d2 $ "808bd:1(6,8)*2" # pan 0.3 # gain 1.5 # cps (90/120)
          # cut "-1"
  d3 $ degrade $ "[808sd:2]*8" # pan 0.5 # gain 3
  -- d5 $ fast 2 $ "~ 808ht!3" # speed 2
  d4 $ e 2 (# gain 3) $ (struct "~ [t [t*2]]") $ "hc"
      # pan 0.5 # gain 0
      -- # sus 0.1
      -- # room 0.05


d1 $ "bd*8"


let k x = do
        listEnumToFunc [genRect (x/9) | x <- map makeValue [0..9]]
    genRect dx = do
      -- translate ((makeTidalParam "n" + 1)) (10*cont) (20)
      objScale (2* pan') blank blank
      rect 20 20 20 200
        where cont = dx
in draw $ do
  translate (-500) (-500) 0
  listEnumToFunc [k (x*10) | x <- map makeValue [0..7]]
  translate (500) (100) 0
  listEnumToFunc [k (x*10) | x <- map makeValue [0..7]]
  -- k (50)

draw $ do {rect 20 20 20 ((200*) $ sin (frameCount*0.003))}










let step1 = "step1: draw a basic shape"
  in draw $ do
  fill 255 255 255
  text step1 0 0 blank blank
  -- box 200 200 200 200 200

let step1 = "step1: draw a basic shape"
  in draw $ do
    text step1 0 0 blank blank
    translateY (250)
    box 200 200 200 200 200


let step2 = "step2: do stuff to the shape"
  in draw $ do
  fill 255 255 255
  text step2 (-300) 0 blank blank
  -- rotate (frameCount*0.00005)
  -- fill (frameCount / 80)
  -- box 200 200 200 200 200

let step2 = "step2: do stuff to the shape"
  in draw $ do
  fill 255 255 255
  text step2 (-300) 0 blank blank
  translateY (250)
  rotateX (frameCount*0.005)
  rotateY (frameCount*0.9)
  fill (frameCount / 8) 0 0
  box 200 200 200 200 200


let step3 = "step3: turn the new shape into a function"
    shape = do
      push
      translateY (250)
      rotateX (frameCount*0.005)
      rotateY (frameCount*0.9)
      fill (frameCount / 8) 0 0
      box 200 200 200 200 200
      pop
  in draw $ do
    fill 255 255 255
    text step3 (-300) 0 blank blank
    -- translateX (-400)
    -- shape
    -- translateX (400)
    -- shape
    -- translateX (400)
    -- shape


let step3 = "step3: turn the new shape into a function"
    shape = do
      push
      translateY (250)
      rotateX (frameCount*0.005)
      rotateY (frameCount*0.9)
      fill (frameCount / 8) 0 0
      box 200 200 200 200 200
      pop
  in draw $ do
    fill 255 255 255
    text step3 (-300) 0 blank blank
    translateX (-400)
    shape
    translateX (400)
    shape
    translateX (400)
    shape


let step4 = "step4: change random variables"
    shape x = do
      push
      translateY (259)
      -- rotateX (frameCount*0.05)
      -- rotateY (frameCount*0.09)
      rotateZ (frameCount*0.09)
      fill ((sqrt frameCount )*x) 0 ((sqrt frameCount )*x**2)
      -- box 200 200 200 200 200
      plane 300 300 300 30
      -- triangle 3 3 3 4 4 4
      box 200 200 200 200 200
      -- pop
in draw $ do
  fill 255 255 255
  text (makeJSVar step4) (-300) 0 blank blank

    -- translateX (-400)
    -- shape 2
    -- translateX (400)
    -- shape 20
    -- translateX (400)
    -- shape 200


reset draw

d1 $ "bd"

let step4 = "step4: change random variables"
    shape x = do
      push
      translateY (259)
      -- rotateX (frameCount*0.05)
      -- rotateY (frameCount*0.09)
      rotateZ (frameCount*0.09)
      fill ((sqrt frameCount )*x) 0 ((sqrt frameCount )*x**2)
      -- box 200 200 200 200 200
      plane 300 300 300 30
      -- triangle 3 3 3 4 4 4
      box 200 200 200 200 200
      -- pop
  in draw $ do
    fill 255 255 255
    text step4 (-300) 0 blank blank
    translateX (-400)
    shape 2
    translateX (400)
    shape 20
    translateX (400)
    shape 200


d1 $ fast 2
    $ (|+| n (slow 8 $ "32 34 32 [32!3 31]"))
    $ n "[0 3 7 10 15 7 3 0]" # "rash"
    # room 0


d3 $ fast 2 $ "~ ~ 808:2 !" # gain 1.4 # orbit 3

d1 $ slow 4 $ "~ 808 ~ [~!7 808:1*1]" # room 0.4 # gain 2
    # speed 0.5 # size 0.96
    # up "0"

d5 $ "blip*8" # triode 1.8 #speed 0.8
    # up "-7"

d2 $ fast 1 $ linger (1/1) $ chop 4 $ ply 1 $ n "0*1 1 [2*1] [[3] <[~ 6]>]" # "amencutup"
    # speed 0.5
    # pan 0.7
    # cut 1
    # gain 1.4

do
  hush
  d2 $ linger 0.5 $ ply 2 $ slice 16 "[<7 8>*8]" $ "pepe:3" # gain 2 # speed 0.95
      # orbit 0
      # up 0
  d3 $ shiftBy 0.25 $ "~ snare:50"  #gain 2.5
    -- # room "0 0 0.5 0"
  d4 $ fast 2 $ "rezzett(3,8)" # gain 3 #orbit 0
  d1
      -- $ stutWith 4 (2*4.1/6) (|- up 12)
      $ up "[0]*16" # "xx:32"
      # cut "-1!3 0"
      # gain 1.3
      # triode 1.5
      # sus 0.2
      -- # delay 0.5
      -- # delaytime (0.2)
      -- # delayfb 0.4
      -- # room 0.4
      -- # size 0.92

let msg = do
            fill 255 255 255
            push
            translateX (300 * (begin'))
            rotateY 180
            rotateZ 180
            text (makeJSVar "i like this color") 250 0 blank blank
            rotateX (frameCount * 0.05)
            rotateY 180
            fill (255 * begin') (255 * begin') (255 * begin')
            -- fill (15 *(makeTidalParamFor "s" "rash" "lpf")) 25 (255)
            push
            box 200 20 20 200 20
            pop
            pop
in draw $ do
  translate (-450) 0 0
  rotateZ 90
  rotateX 90
  rotateX (frameCount*0.0005)
  listEnumToFunc [do
    rotateY ((x + (frameCount*0.05)))
    msg | x <- map makeJSVar [0..20]]










let step5 = "step5 (optional): \n audio"
    shape x = do
      push
      translateY (259)
      rotateZ (frameCount*(makeTidalParam "note"))
      rotateX ((makeTidalParam "note")*0.0000000625)
      fill ((sqrt frameCount )*x) 0 ((sqrt frameCount )*x**2)
      -- box 200 200 200 200 200
      plane 300 300 300 30
      -- triangle 3 3 3 4 4 4
      box 200 200 200 200 200
      -- pop
  in draw $ do
    fill 255 255 255
    text step5 (-300) 0 blank blank
    translateX (-400)
    shape 2
    translateX (400)
    shape 20
    translateX (400)
    shape 200







do
  hush
  d1 $ slow 4 $ slice 12 "[[4 5]@2 6 3]!7 [[2 ~ ~ <~ ~ ~ <0 0>>]*2] " $ "xtcy" # cut "-1" # gain 1.2
      # speed 0.75
      # legato 1 # shape 0.2
      # cps (90/120)
  d5 $ "~ sf:3" # comb 0.12 # gain 2.2 # orbit 0 # cut "-1"
        # triode 2.2
  d2 $ fix (# n (choose [0,1,2,3])) (s "tabla")
      $ fast 2 $ "[<<808bd:0 ~> <tabla tabla>>, [tam:2 [~ ~ ~ ~ ~ ~] sid:8!2]*2]"
        # comb 0.2
        # distort 0.2
        # speed "0.9"
        # gain 1.3
        # orbit 0




-- d1 $ slice 8 "0 1 0 0 <2*1> 0 1 0" $ "breaks125:5"
--       # lpf 500
--       # distort 0.25


do
  hush
  d1 $ slow 8 $ slice 16 "[0..6] [[10 11 12 13]]!7" $ "tabla:1"
      # speed 0.45 # distort 0.2 # end 0.5
      # up "0 -12!7"
  d2 $ "~ [rs9:0,future:2,short:1]" # triode 1.4 # gain 1.2 # orbit 0 # cut "-1"
  d3 $ n "<1(1,8) 0 0 0> ~ ~ ~ ~ ~ 0" # "808bd" # gain 2 # orbit 0

  d2 $ fix (# n (choose [0,1,2,3])) (s "tabla")
      $ fast 2 $ "[<<808bd:0 ~> <tabla tabla>>, [tam:2 [~ ~ ~ ~ ~ ~] sid:8!2]*2]"
        # comb 0.2
        # distort 0.2
        # speed "0.9"
        # gain 1.3
        # orbit 0







properFraction 0.5
:info Integral




        -- over the space of 2 beats
allRythmssBinary = ["t@2","t t","t*4","t t ~ t","t t@3", "t@3 t", "t*6","t*8",
              "t@2 t*2","t*2 t@2","[t*2 t@2]*2","[t@2 t*2]*2","[t t@2 t]*2",
              "[t@3 t]*2","[t t@3]*2"]


allRythmssTernary = ["t@3","t*2","[t@2 t]*2","[t t@2]*2","[t*3]*2",
                                "[t t t*2]","[t t*2]", "[t*2 t t]",
                                "[t t t*2]*2","[t t*2 t]*2","[t*2 t t]*2",
                                "[t*2 t*2 t]*2","[t*2 t t*2]*2","[t t*2 t*2]*2",
                                "[t*6]*2",
                                "[t@3 t t@2]*2","[t@3 t t*2]*2",
                                "[t t@3 t@2]*2","[t t@3 t*2]*2",
                                "[t@2 t t@3]*2","[t*2 t t@3]*2",
                                "[t@2 t@3 t]*2","[t*2 t@3 t]*2",
                                "[t@3 t t@2]*2","[t@3 t t*2]*2"] :: [Pattern]

once $ struct (parseBP_E $ choose allRythmssTernary) $ "bd"
                                once $ struct "t@3 t t@2"$ "bd"



d1 $ fast 2 $ n (scale "<minPent>" "0 1 2 3") # "rash" # gain 1.25 |+| n 40


:info RealFrac
:t properFraction

properFraction 1



quot (frameCount) (makeValue 2)
